/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/ray-automl/apis/automl/v1"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TrainerLister helps list Trainers.
// All objects returned here must be treated as read-only.
type TrainerLister interface {
	// List lists all Trainers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Trainer, err error)
	// Trainers returns an object that can list and get Trainers.
	Trainers(namespace string) TrainerNamespaceLister
	TrainerListerExpansion
}

// trainerLister implements the TrainerLister interface.
type trainerLister struct {
	indexer cache.Indexer
}

// NewTrainerLister returns a new TrainerLister.
func NewTrainerLister(indexer cache.Indexer) TrainerLister {
	return &trainerLister{indexer: indexer}
}

// List lists all Trainers in the indexer.
func (s *trainerLister) List(selector labels.Selector) (ret []*v1.Trainer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Trainer))
	})
	return ret, err
}

// Trainers returns an object that can list and get Trainers.
func (s *trainerLister) Trainers(namespace string) TrainerNamespaceLister {
	return trainerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TrainerNamespaceLister helps list and get Trainers.
// All objects returned here must be treated as read-only.
type TrainerNamespaceLister interface {
	// List lists all Trainers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Trainer, err error)
	// Get retrieves the Trainer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Trainer, error)
	TrainerNamespaceListerExpansion
}

// trainerNamespaceLister implements the TrainerNamespaceLister
// interface.
type trainerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Trainers in the indexer for a given namespace.
func (s trainerNamespaceLister) List(selector labels.Selector) (ret []*v1.Trainer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Trainer))
	})
	return ret, err
}

// Get retrieves the Trainer from the indexer for a given namespace and name.
func (s trainerNamespaceLister) Get(name string) (*v1.Trainer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(corev1.Resource("trainer"), name)
	}
	return obj.(*v1.Trainer), nil
}
