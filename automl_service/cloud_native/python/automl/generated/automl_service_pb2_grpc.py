# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import generated.automl_service_pb2 as automl__service__pb2


class AutoMLServiceStub(object):
    """Service from client to proxy
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DoAutoML = channel.unary_unary(
                '/AutoMLService/DoAutoML',
                request_serializer=automl__service__pb2.DoAutoMLRequest.SerializeToString,
                response_deserializer=automl__service__pb2.DoAutoMLReply.FromString,
                )
        self.GetResult = channel.unary_unary(
                '/AutoMLService/GetResult',
                request_serializer=automl__service__pb2.GetResultRequest.SerializeToString,
                response_deserializer=automl__service__pb2.GetResultReply.FromString,
                )


class AutoMLServiceServicer(object):
    """Service from client to proxy
    """

    def DoAutoML(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AutoMLServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DoAutoML': grpc.unary_unary_rpc_method_handler(
                    servicer.DoAutoML,
                    request_deserializer=automl__service__pb2.DoAutoMLRequest.FromString,
                    response_serializer=automl__service__pb2.DoAutoMLReply.SerializeToString,
            ),
            'GetResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetResult,
                    request_deserializer=automl__service__pb2.GetResultRequest.FromString,
                    response_serializer=automl__service__pb2.GetResultReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AutoMLService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AutoMLService(object):
    """Service from client to proxy
    """

    @staticmethod
    def DoAutoML(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AutoMLService/DoAutoML',
            automl__service__pb2.DoAutoMLRequest.SerializeToString,
            automl__service__pb2.DoAutoMLReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AutoMLService/GetResult',
            automl__service__pb2.GetResultRequest.SerializeToString,
            automl__service__pb2.GetResultReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TrainerRegisterServiceStub(object):
    """Service from trainer to proxy
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TrainerRegister = channel.unary_unary(
                '/TrainerRegisterService/TrainerRegister',
                request_serializer=automl__service__pb2.TrainerRegisterRequest.SerializeToString,
                response_deserializer=automl__service__pb2.TrainerRegisterReply.FromString,
                )


class TrainerRegisterServiceServicer(object):
    """Service from trainer to proxy
    """

    def TrainerRegister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TrainerRegisterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TrainerRegister': grpc.unary_unary_rpc_method_handler(
                    servicer.TrainerRegister,
                    request_deserializer=automl__service__pb2.TrainerRegisterRequest.FromString,
                    response_serializer=automl__service__pb2.TrainerRegisterReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TrainerRegisterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TrainerRegisterService(object):
    """Service from trainer to proxy
    """

    @staticmethod
    def TrainerRegister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TrainerRegisterService/TrainerRegister',
            automl__service__pb2.TrainerRegisterRequest.SerializeToString,
            automl__service__pb2.TrainerRegisterReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class WorkerServiceStub(object):
    """Service from trainer to worker
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SingleTrain = channel.unary_unary(
                '/WorkerService/SingleTrain',
                request_serializer=automl__service__pb2.SingleTrainRequest.SerializeToString,
                response_deserializer=automl__service__pb2.SingleTrainReply.FromString,
                )


class WorkerServiceServicer(object):
    """Service from trainer to worker
    """

    def SingleTrain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SingleTrain': grpc.unary_unary_rpc_method_handler(
                    servicer.SingleTrain,
                    request_deserializer=automl__service__pb2.SingleTrainRequest.FromString,
                    response_serializer=automl__service__pb2.SingleTrainReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'WorkerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WorkerService(object):
    """Service from trainer to worker
    """

    @staticmethod
    def SingleTrain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WorkerService/SingleTrain',
            automl__service__pb2.SingleTrainRequest.SerializeToString,
            automl__service__pb2.SingleTrainReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
